{"version":3,"sources":["components/result/Result.module.css","styles/App.module.css","components/header/Header.module.css","components/search/Search.module.css","components/footer/Footer.module.css","components/button/Button.module.css","components/header/Header.tsx","components/search/Search.tsx","components/result/Result.tsx","components/footer/Footer.tsx","context/index.ts","components/button/Button.tsx","generated/graphql.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Header","className","styles","header","Search","values","handleChange","handleSubmit","searchSpace","htmlFor","type","onChange","e","target","value","name","id","placeholder","Result","data","useState","albums","artist","album","setAlbum","style","setStyle","mainContainer","resultContainer","artistsResult","queryArtists","map","art","ind","actualResult","actualResultClicked","onClick","window","scroll","top","behavior","src","image","width","alt","albumContainer","albumsResult","alb","i","subResult","length","slice","Footer","footer","createContext","state","setState","Button","useContext","ButtonContext","button","disabled","preventDefault","defaultOptions","ArtistDocument","gql","App","setValues","baseOptions","options","Apollo","useArtistLazyQuery","getArtists","loading","error","useEffect","Provider","rel","href","container","variables","byName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8528881f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"mainContainer\":\"Result_mainContainer__3ClPA\",\"resultContainer\":\"Result_resultContainer__375Zh\",\"artistsResult\":\"Result_artistsResult__FQzDS\",\"actualResult\":\"Result_actualResult__3BcZ1\",\"actualResultClicked\":\"Result_actualResultClicked__1q8RZ\",\"albumContainer\":\"Result_albumContainer__3AAT7\",\"albumsResult\":\"Result_albumsResult__3ei4o\",\"subResult\":\"Result_subResult__2bNbB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1uyUS\",\"header\":\"App_header__qkCOy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1MOL-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"searchSpace\":\"Search_searchSpace__3Qp-T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"footer\":\"Footer_footer__BKhgK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2cZ5P\"};","import React, { FunctionComponent, ReactElement } from \"react\";\nimport styles from './Header.module.css'\n\ninterface Props {}\n\nconst Header: FunctionComponent<Props> = (): ReactElement => {\n  return (\n    <header className={styles.header}>\n      <h1>Music Search</h1>\n    </header>\n  );\n};\n\nexport default Header;\n","import React, { FunctionComponent, ReactElement } from \"react\";\nimport styles from \"./Search.module.css\";\nimport { SearchProps } from \"../../types\";\nimport { Button } from \"..\";\n\nconst Search: FunctionComponent<SearchProps> = ({ values, handleChange, handleSubmit }): ReactElement => {\n  \n  return (\n    <form  className={styles.searchSpace}>\n      <label htmlFor=\"search\">Search Here</label>\n      <input\n        type=\"search\"\n        onChange={(e) => handleChange(e.target.value)}\n        value={values}\n        name=\"search\"\n        id=\"search\"\n        aria-label=\"Search by artist name\"\n        placeholder=\"Search by artist name\"\n      />\n      <Button handleSubmit={handleSubmit} />\n    </form>\n  );\n};\n\nexport default Search;\n","import React, { FunctionComponent, ReactElement, useState } from \"react\";\nimport { Album } from \"../../generated/graphql\";\nimport { ResultProps, AlbumState } from \"../../types\";\nimport styles from \"./Result.module.css\";\n\nconst Result: FunctionComponent<ResultProps> = ({ data }): ReactElement => {\n  const [album, setAlbum] = useState<AlbumState>({albums: [], artist: ''});\n  const [style, setStyle] = useState<number>();\n\n  return (\n    <section className={styles.mainContainer}>\n      <h2>Search Result</h2>\n      <section className={styles.resultContainer}>\n        <section className={styles.artistsResult}>\n          {data.queryArtists?.map((art, ind: number) => (\n            <div\n              className={`${styles.actualResult} ${\n                style === ind ? styles.actualResultClicked : \"\"\n              }`}\n              onClick={() => {\n                setAlbum({albums: art?.albums as Album[], artist: art?.name!});\n                setStyle(ind);\n                window.scroll({top:0,behavior:'smooth'})\n              }}\n              key={`${ind}-${art?.id}`}\n            >\n              <h3>{art?.name}</h3>\n              <img src={art?.image!} width={120} alt={art?.name} />\n            </div>\n          ))}\n        </section>\n        <div className={styles.albumContainer}>\n          <h3>{album.artist && `${album.artist}'s`} Album Lists</h3>\n          <section className={styles.albumsResult}>\n            {album &&\n              album.albums.map((alb, i) => (\n                <div\n                  key={`${i}-${alb.id}`}\n                  className={styles.subResult}\n                >\n                  <img src={alb.image!} alt={alb.name!} />\n                  <p>\n                    {alb.name?.length! <= 45\n                      ? alb.name\n                      : `${alb.name?.slice(0, 45)} ...`}\n                  </p>\n                </div>\n              ))}\n          </section>\n        </div>\n      </section>\n    </section>\n  );\n};\n\nexport default Result;\n","import React, { FunctionComponent, ReactElement } from 'react'\nimport styles from './Footer.module.css';\n\nconst Footer: FunctionComponent = (): ReactElement => {\n  return (\n    <footer className={styles.footer}>\n      Built With React and Typescript\n    </footer>\n  )\n}\n\nexport default Footer\n","import { createContext } from \"react\";\nimport { ContextState } from \"../types/context\";\n\nexport default createContext<ContextState>({state: false, setState: () => {}});\n","import React, { FunctionComponent, useContext } from \"react\";\nimport { ButtonProps, ContextState } from \"../../types\";\nimport styles from \"./Button.module.css\";\nimport ButtonContext from \"../../context\";\n\nconst Button: FunctionComponent<ButtonProps> = ({ handleSubmit }) => {\n  const { state } = useContext<ContextState>(ButtonContext);\n  return (\n    <button\n      className={styles.button}\n      disabled={state}\n      name=\"search\"\n      onClick={(e) => {\n        e.preventDefault()\n        handleSubmit();\n      }}\n    >\n      Start Search\n    </button>\n  );\n};\n\nexport default Button;\n","import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\nexport type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {};\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\nexport type Album = {\n  __typename?: \"Album\";\n  id?: Maybe<Scalars[\"ID\"]>;\n  image?: Maybe<Scalars[\"String\"]>;\n  name?: Maybe<Scalars[\"String\"]>;\n  tracks?: Maybe<Array<Maybe<Track>>>;\n};\n\nexport type Artist = {\n  __typename?: \"Artist\";\n  albums?: Maybe<Array<Maybe<Album>>>;\n  id?: Maybe<Scalars[\"ID\"]>;\n  image?: Maybe<Scalars[\"String\"]>;\n  name: Scalars[\"String\"];\n};\n\nexport type ArtistAlbumsArgs = {\n  limit?: Maybe<Scalars[\"Int\"]>;\n};\n\nexport type Query = {\n  __typename?: \"Query\";\n  hi?: Maybe<Scalars[\"String\"]>;\n  queryArtists?: Maybe<Array<Maybe<Artist>>>;\n};\n\nexport type QueryHiArgs = {\n  message?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type QueryQueryArtistsArgs = {\n  byName?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type Track = {\n  __typename?: \"Track\";\n  artists?: Maybe<Array<Maybe<Artist>>>;\n  id?: Maybe<Scalars[\"ID\"]>;\n  name: Scalars[\"String\"];\n  preview_url?: Maybe<Scalars[\"String\"]>;\n};\n\nexport type ArtistQueryVariables = Exact<{\n  byName: Scalars[\"String\"];\n}>;\n\nexport type ArtistQuery = {\n  __typename?: \"Query\";\n  queryArtists?:\n    | Array<\n        | {\n            __typename?: \"Artist\";\n            name: string;\n            image?: string | null | undefined;\n            id?: string | null | undefined;\n            albums?:\n              | Array<\n                  | {\n                      __typename?: \"Album\";\n                      name?: string | null | undefined;\n                      image?: string | null | undefined;\n                      id?: string | null | undefined;\n                    }\n                  | null\n                  | undefined\n                >\n              | null\n              | undefined;\n          }\n        | null\n        | undefined\n      >\n    | null\n    | undefined;\n};\n\nexport const ArtistDocument = gql`\n  query Artist($byName: String!) {\n    queryArtists(byName: $byName) {\n\t\t\tname\n\t\t\timage\n\t\t\tid\n\t\t\talbums {\n\t\t\t\tname\n\t\t\t\timage\n\t\t\t\tid\n        tracks {\n          id\n          name\n          preview_url\n          artists {\n            id\n            name\n          }\n        }\n\t\t\t}\n    }\n  }\n`;\n\n/**\n * __useArtistQuery__\n *\n * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.\n * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useArtistQuery({\n *   variables: {\n *      byName: // value for 'byName'\n *   },\n * });\n */\nexport function useArtistQuery(\n  baseOptions: Apollo.QueryHookOptions<ArtistQuery, ArtistQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<ArtistQuery, ArtistQueryVariables>(\n    ArtistDocument,\n    options\n  );\n}\nexport function useArtistLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<ArtistQuery, ArtistQueryVariables>(\n    ArtistDocument,\n    options\n  );\n}\nexport type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;\nexport type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;\nexport type ArtistQueryResult = Apollo.QueryResult<\n  ArtistQuery,\n  ArtistQueryVariables\n>;\n","import {\n  FunctionComponent,\n  ReactElement,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Footer, Header, Result, Search } from \"./components\";\nimport { useArtistLazyQuery } from \"./generated/graphql\";\nimport { Helmet, HelmetProvider } from \"react-helmet-async\";\nimport { container, header } from \"./styles/App.module.css\";\nimport ButtonContext from \"./context\";\n\nconst App: FunctionComponent = (): ReactElement => {\n  // set values for search input\n  const [values, setValues] = useState<string>(\"\");\n  const [state, setState] = useState<boolean>(false);\n  \n  const [getArtists, { data, loading, error }] = useArtistLazyQuery();\n\n  const updateQuery = () => {\n    getArtists({ variables: { byName: values } });\n  };\n\n  useEffect(() => {\n    setState(() => loading);\n    return () => {};\n  }, [loading]);\n\n  return (\n    <ButtonContext.Provider value={{ state, setState }}>\n      <HelmetProvider>\n        <Helmet>\n          <title>Music Graphql Search</title>\n          <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n          <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n          <link\n            href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@100;400;500&display=swap\"\n            rel=\"stylesheet\"\n          />\n        </Helmet>\n        <main className={container}>\n          <div className={header}>\n            <Header />\n            <Search\n              values={values}\n              handleChange={setValues}\n              handleSubmit={updateQuery}\n            />\n          </div>\n          {loading && <div><h3>Loading Search Result</h3></div>}\n          {error && <div>{error}</div>}\n          {data && <Result data={data} />}\n        </main>\n        <Footer />\n      </HelmetProvider>\n    </ButtonContext.Provider>\n  );\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { ApolloProvider, ApolloClient, InMemoryCache } from \"@apollo/client\";\n\nconst client = new ApolloClient({\n  uri: \"https://spotify-graphql-server.herokuapp.com/graphql\",\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}